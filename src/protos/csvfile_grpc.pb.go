// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: csvfile.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CsvFileServiceClient is the client API for CsvFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CsvFileServiceClient interface {
	IngestCSV(ctx context.Context, opts ...grpc.CallOption) (CsvFileService_IngestCSVClient, error)
}

type csvFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCsvFileServiceClient(cc grpc.ClientConnInterface) CsvFileServiceClient {
	return &csvFileServiceClient{cc}
}

func (c *csvFileServiceClient) IngestCSV(ctx context.Context, opts ...grpc.CallOption) (CsvFileService_IngestCSVClient, error) {
	stream, err := c.cc.NewStream(ctx, &CsvFileService_ServiceDesc.Streams[0], "/protos.csvfile.CsvFileService/IngestCSV", opts...)
	if err != nil {
		return nil, err
	}
	x := &csvFileServiceIngestCSVClient{stream}
	return x, nil
}

type CsvFileService_IngestCSVClient interface {
	Send(*CsvFileRequest) error
	CloseAndRecv() (*CsvFileResponse, error)
	grpc.ClientStream
}

type csvFileServiceIngestCSVClient struct {
	grpc.ClientStream
}

func (x *csvFileServiceIngestCSVClient) Send(m *CsvFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *csvFileServiceIngestCSVClient) CloseAndRecv() (*CsvFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CsvFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CsvFileServiceServer is the server API for CsvFileService service.
// All implementations must embed UnimplementedCsvFileServiceServer
// for forward compatibility
type CsvFileServiceServer interface {
	IngestCSV(CsvFileService_IngestCSVServer) error
	mustEmbedUnimplementedCsvFileServiceServer()
}

// UnimplementedCsvFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCsvFileServiceServer struct {
}

func (UnimplementedCsvFileServiceServer) IngestCSV(CsvFileService_IngestCSVServer) error {
	return status.Errorf(codes.Unimplemented, "method IngestCSV not implemented")
}
func (UnimplementedCsvFileServiceServer) mustEmbedUnimplementedCsvFileServiceServer() {}

// UnsafeCsvFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CsvFileServiceServer will
// result in compilation errors.
type UnsafeCsvFileServiceServer interface {
	mustEmbedUnimplementedCsvFileServiceServer()
}

func RegisterCsvFileServiceServer(s grpc.ServiceRegistrar, srv CsvFileServiceServer) {
	s.RegisterService(&CsvFileService_ServiceDesc, srv)
}

func _CsvFileService_IngestCSV_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CsvFileServiceServer).IngestCSV(&csvFileServiceIngestCSVServer{stream})
}

type CsvFileService_IngestCSVServer interface {
	SendAndClose(*CsvFileResponse) error
	Recv() (*CsvFileRequest, error)
	grpc.ServerStream
}

type csvFileServiceIngestCSVServer struct {
	grpc.ServerStream
}

func (x *csvFileServiceIngestCSVServer) SendAndClose(m *CsvFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *csvFileServiceIngestCSVServer) Recv() (*CsvFileRequest, error) {
	m := new(CsvFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CsvFileService_ServiceDesc is the grpc.ServiceDesc for CsvFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CsvFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.csvfile.CsvFileService",
	HandlerType: (*CsvFileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IngestCSV",
			Handler:       _CsvFileService_IngestCSV_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "csvfile.proto",
}
