// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: input_file.proto

package inputfile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IngestFileServiceClient is the client API for IngestFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngestFileServiceClient interface {
	IngestFilePROTO(ctx context.Context, opts ...grpc.CallOption) (IngestFileService_IngestFilePROTOClient, error)
	IngestFileAVROS(ctx context.Context, opts ...grpc.CallOption) (IngestFileService_IngestFileAVROSClient, error)
}

type ingestFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestFileServiceClient(cc grpc.ClientConnInterface) IngestFileServiceClient {
	return &ingestFileServiceClient{cc}
}

func (c *ingestFileServiceClient) IngestFilePROTO(ctx context.Context, opts ...grpc.CallOption) (IngestFileService_IngestFilePROTOClient, error) {
	stream, err := c.cc.NewStream(ctx, &IngestFileService_ServiceDesc.Streams[0], "/protos.inputfile.IngestFileService/IngestFilePROTO", opts...)
	if err != nil {
		return nil, err
	}
	x := &ingestFileServiceIngestFilePROTOClient{stream}
	return x, nil
}

type IngestFileService_IngestFilePROTOClient interface {
	Send(*InputFileRequest) error
	CloseAndRecv() (*InputFileResponse, error)
	grpc.ClientStream
}

type ingestFileServiceIngestFilePROTOClient struct {
	grpc.ClientStream
}

func (x *ingestFileServiceIngestFilePROTOClient) Send(m *InputFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ingestFileServiceIngestFilePROTOClient) CloseAndRecv() (*InputFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(InputFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ingestFileServiceClient) IngestFileAVROS(ctx context.Context, opts ...grpc.CallOption) (IngestFileService_IngestFileAVROSClient, error) {
	stream, err := c.cc.NewStream(ctx, &IngestFileService_ServiceDesc.Streams[1], "/protos.inputfile.IngestFileService/IngestFileAVROS", opts...)
	if err != nil {
		return nil, err
	}
	x := &ingestFileServiceIngestFileAVROSClient{stream}
	return x, nil
}

type IngestFileService_IngestFileAVROSClient interface {
	Send(*InputFileRequest) error
	CloseAndRecv() (*InputFileResponse, error)
	grpc.ClientStream
}

type ingestFileServiceIngestFileAVROSClient struct {
	grpc.ClientStream
}

func (x *ingestFileServiceIngestFileAVROSClient) Send(m *InputFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ingestFileServiceIngestFileAVROSClient) CloseAndRecv() (*InputFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(InputFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IngestFileServiceServer is the server API for IngestFileService service.
// All implementations must embed UnimplementedIngestFileServiceServer
// for forward compatibility
type IngestFileServiceServer interface {
	IngestFilePROTO(IngestFileService_IngestFilePROTOServer) error
	IngestFileAVROS(IngestFileService_IngestFileAVROSServer) error
	mustEmbedUnimplementedIngestFileServiceServer()
}

// UnimplementedIngestFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIngestFileServiceServer struct {
}

func (UnimplementedIngestFileServiceServer) IngestFilePROTO(IngestFileService_IngestFilePROTOServer) error {
	return status.Errorf(codes.Unimplemented, "method IngestFilePROTO not implemented")
}
func (UnimplementedIngestFileServiceServer) IngestFileAVROS(IngestFileService_IngestFileAVROSServer) error {
	return status.Errorf(codes.Unimplemented, "method IngestFileAVROS not implemented")
}
func (UnimplementedIngestFileServiceServer) mustEmbedUnimplementedIngestFileServiceServer() {}

// UnsafeIngestFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngestFileServiceServer will
// result in compilation errors.
type UnsafeIngestFileServiceServer interface {
	mustEmbedUnimplementedIngestFileServiceServer()
}

func RegisterIngestFileServiceServer(s grpc.ServiceRegistrar, srv IngestFileServiceServer) {
	s.RegisterService(&IngestFileService_ServiceDesc, srv)
}

func _IngestFileService_IngestFilePROTO_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngestFileServiceServer).IngestFilePROTO(&ingestFileServiceIngestFilePROTOServer{stream})
}

type IngestFileService_IngestFilePROTOServer interface {
	SendAndClose(*InputFileResponse) error
	Recv() (*InputFileRequest, error)
	grpc.ServerStream
}

type ingestFileServiceIngestFilePROTOServer struct {
	grpc.ServerStream
}

func (x *ingestFileServiceIngestFilePROTOServer) SendAndClose(m *InputFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ingestFileServiceIngestFilePROTOServer) Recv() (*InputFileRequest, error) {
	m := new(InputFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _IngestFileService_IngestFileAVROS_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngestFileServiceServer).IngestFileAVROS(&ingestFileServiceIngestFileAVROSServer{stream})
}

type IngestFileService_IngestFileAVROSServer interface {
	SendAndClose(*InputFileResponse) error
	Recv() (*InputFileRequest, error)
	grpc.ServerStream
}

type ingestFileServiceIngestFileAVROSServer struct {
	grpc.ServerStream
}

func (x *ingestFileServiceIngestFileAVROSServer) SendAndClose(m *InputFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ingestFileServiceIngestFileAVROSServer) Recv() (*InputFileRequest, error) {
	m := new(InputFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IngestFileService_ServiceDesc is the grpc.ServiceDesc for IngestFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngestFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.inputfile.IngestFileService",
	HandlerType: (*IngestFileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IngestFilePROTO",
			Handler:       _IngestFileService_IngestFilePROTO_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "IngestFileAVROS",
			Handler:       _IngestFileService_IngestFileAVROS_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "input_file.proto",
}
