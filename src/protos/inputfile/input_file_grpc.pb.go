// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: input_file.proto

package inputfile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InputFileServiceClient is the client API for InputFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InputFileServiceClient interface {
	IngestFile(ctx context.Context, opts ...grpc.CallOption) (InputFileService_IngestFileClient, error)
}

type inputFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInputFileServiceClient(cc grpc.ClientConnInterface) InputFileServiceClient {
	return &inputFileServiceClient{cc}
}

func (c *inputFileServiceClient) IngestFile(ctx context.Context, opts ...grpc.CallOption) (InputFileService_IngestFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &InputFileService_ServiceDesc.Streams[0], "/protos.inputfile.InputFileService/IngestFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &inputFileServiceIngestFileClient{stream}
	return x, nil
}

type InputFileService_IngestFileClient interface {
	Send(*InputFileRequest) error
	CloseAndRecv() (*InputFileResponse, error)
	grpc.ClientStream
}

type inputFileServiceIngestFileClient struct {
	grpc.ClientStream
}

func (x *inputFileServiceIngestFileClient) Send(m *InputFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *inputFileServiceIngestFileClient) CloseAndRecv() (*InputFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(InputFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InputFileServiceServer is the server API for InputFileService service.
// All implementations must embed UnimplementedInputFileServiceServer
// for forward compatibility
type InputFileServiceServer interface {
	IngestFile(InputFileService_IngestFileServer) error
	mustEmbedUnimplementedInputFileServiceServer()
}

// UnimplementedInputFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInputFileServiceServer struct {
}

func (UnimplementedInputFileServiceServer) IngestFile(InputFileService_IngestFileServer) error {
	return status.Errorf(codes.Unimplemented, "method IngestFile not implemented")
}
func (UnimplementedInputFileServiceServer) mustEmbedUnimplementedInputFileServiceServer() {}

// UnsafeInputFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InputFileServiceServer will
// result in compilation errors.
type UnsafeInputFileServiceServer interface {
	mustEmbedUnimplementedInputFileServiceServer()
}

func RegisterInputFileServiceServer(s grpc.ServiceRegistrar, srv InputFileServiceServer) {
	s.RegisterService(&InputFileService_ServiceDesc, srv)
}

func _InputFileService_IngestFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InputFileServiceServer).IngestFile(&inputFileServiceIngestFileServer{stream})
}

type InputFileService_IngestFileServer interface {
	SendAndClose(*InputFileResponse) error
	Recv() (*InputFileRequest, error)
	grpc.ServerStream
}

type inputFileServiceIngestFileServer struct {
	grpc.ServerStream
}

func (x *inputFileServiceIngestFileServer) SendAndClose(m *InputFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *inputFileServiceIngestFileServer) Recv() (*InputFileRequest, error) {
	m := new(InputFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InputFileService_ServiceDesc is the grpc.ServiceDesc for InputFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InputFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.inputfile.InputFileService",
	HandlerType: (*InputFileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IngestFile",
			Handler:       _InputFileService_IngestFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "input_file.proto",
}
