// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     organization.avsc
 *     school.avsc
 *     user.avsc
 *     class.avsc
 *     s3filecreated.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type S3FileCreatedPayload struct {
	Key string `json:"key"`

	Aws_region string `json:"aws_region"`

	Bucket_name string `json:"bucket_name"`

	Content_length int64 `json:"content_length"`

	Content_type string `json:"content_type"`

	Operation_type string `json:"operation_type"`
}

const S3FileCreatedPayloadAvroCRC64Fingerprint = "\xcdZd\x03\xfb\xc1\xdf\x03"

func NewS3FileCreatedPayload() S3FileCreatedPayload {
	r := S3FileCreatedPayload{}
	return r
}

func DeserializeS3FileCreatedPayload(r io.Reader) (S3FileCreatedPayload, error) {
	t := NewS3FileCreatedPayload()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeS3FileCreatedPayloadFromSchema(r io.Reader, schema string) (S3FileCreatedPayload, error) {
	t := NewS3FileCreatedPayload()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeS3FileCreatedPayload(r S3FileCreatedPayload, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Key, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Aws_region, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Bucket_name, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Content_length, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Content_type, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Operation_type, w)
	if err != nil {
		return err
	}
	return err
}

func (r S3FileCreatedPayload) Serialize(w io.Writer) error {
	return writeS3FileCreatedPayload(r, w)
}

func (r S3FileCreatedPayload) Schema() string {
	return "{\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"aws_region\",\"type\":\"string\"},{\"name\":\"bucket_name\",\"type\":\"string\"},{\"name\":\"content_length\",\"type\":\"long\"},{\"name\":\"content_type\",\"type\":\"string\"},{\"name\":\"operation_type\",\"type\":\"string\"}],\"name\":\"com.kidsloop.onboarding.S3FileCreatedPayload\",\"type\":\"record\"}"
}

func (r S3FileCreatedPayload) SchemaName() string {
	return "com.kidsloop.onboarding.S3FileCreatedPayload"
}

func (_ S3FileCreatedPayload) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ S3FileCreatedPayload) SetInt(v int32)       { panic("Unsupported operation") }
func (_ S3FileCreatedPayload) SetLong(v int64)      { panic("Unsupported operation") }
func (_ S3FileCreatedPayload) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ S3FileCreatedPayload) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ S3FileCreatedPayload) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ S3FileCreatedPayload) SetString(v string)   { panic("Unsupported operation") }
func (_ S3FileCreatedPayload) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *S3FileCreatedPayload) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Key}

		return w

	case 1:
		w := types.String{Target: &r.Aws_region}

		return w

	case 2:
		w := types.String{Target: &r.Bucket_name}

		return w

	case 3:
		w := types.Long{Target: &r.Content_length}

		return w

	case 4:
		w := types.String{Target: &r.Content_type}

		return w

	case 5:
		w := types.String{Target: &r.Operation_type}

		return w

	}
	panic("Unknown field index")
}

func (r *S3FileCreatedPayload) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *S3FileCreatedPayload) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ S3FileCreatedPayload) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ S3FileCreatedPayload) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ S3FileCreatedPayload) HintSize(int)                     { panic("Unsupported operation") }
func (_ S3FileCreatedPayload) Finalize()                        {}

func (_ S3FileCreatedPayload) AvroCRC64Fingerprint() []byte {
	return []byte(S3FileCreatedPayloadAvroCRC64Fingerprint)
}

func (r S3FileCreatedPayload) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["key"], err = json.Marshal(r.Key)
	if err != nil {
		return nil, err
	}
	output["aws_region"], err = json.Marshal(r.Aws_region)
	if err != nil {
		return nil, err
	}
	output["bucket_name"], err = json.Marshal(r.Bucket_name)
	if err != nil {
		return nil, err
	}
	output["content_length"], err = json.Marshal(r.Content_length)
	if err != nil {
		return nil, err
	}
	output["content_type"], err = json.Marshal(r.Content_type)
	if err != nil {
		return nil, err
	}
	output["operation_type"], err = json.Marshal(r.Operation_type)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *S3FileCreatedPayload) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["key"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Key); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for key")
	}
	val = func() json.RawMessage {
		if v, ok := fields["aws_region"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Aws_region); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for aws_region")
	}
	val = func() json.RawMessage {
		if v, ok := fields["bucket_name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Bucket_name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for bucket_name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["content_length"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Content_length); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for content_length")
	}
	val = func() json.RawMessage {
		if v, ok := fields["content_type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Content_type); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for content_type")
	}
	val = func() json.RawMessage {
		if v, ok := fields["operation_type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Operation_type); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for operation_type")
	}
	return nil
}
